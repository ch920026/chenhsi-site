---
import { type CollectionEntry, getCollection } from "astro:content";

import BaseLayout from "../../layouts/BaseLayout.astro";
import Wrapper from "../../components/Wrapper.astro";
import ContactCTA from "../../components/ContactCTA.astro";
import WorkTitle from "../../components/WorkTitle.astro";
import Icon from "../../components/Icon.astro";
import Pill from "../../components/Pill.astro";
import '../../styles/gallery.css';

interface Props {
  entry: CollectionEntry<"work">;
}

// This is a dynamic route that generates a page for every Markdown file in src/content/
// Read more about dynamic routes and this `getStaticPaths` function in the Astro docs:
// https://docs.astro.build/en/core-concepts/routing/#dynamic-routes
export async function getStaticPaths() {
  const work = await getCollection("work");
  return work.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },

  }));

}

const { entry } = Astro.props;
const { Content } = await entry.render();
var a=entry.data.password;

// const elem = document.getElementById("para");

---



<BaseLayout title={entry.data.title} description={entry.data.description}>

  <div class="stack gap-20">
    <div class="stack gap-15">
      <header>
        <div class="wrapper stack gap-2">
          <a class="back-link" href="/website/work/"><Icon icon="arrow-left" /> Work</a>
          <WorkTitle
            title={entry.data.title}
            sub={entry.data.artist}
            align="start"
            link={entry.data.artistSite}
          >
            <div class="details">
              <div
                class="stack"
                style="  border-top: 1px solid  white;
              border-bottom: 1px solid white; width:35%;padding:20px 0px;"
              >
                <table>
                  <tbody>
                    <col style="width:60%" />
                    <tr>
                      <td>Artist:</td>
                      <td>{entry.data.artist}</td>
                    </tr>
                 
                    <tr>
                      <td>Year:</td>
                      <td>{entry.data.publishDate.getFullYear()}/{entry.data.publishDate.getMonth()+1}</td>
                    </tr>
                    <tr>
                      <td>Dimensions:</td>
                      <td>{entry.data.size}</td>
                    </tr>
                    <tr>
                      <td>Photography:</td>
                      <td>{entry.data.photo}</td>
                    </tr>
                
  
                  </tbody>
                </table>
              </div>

              <p class="description">{entry.data.description} <a href={entry.data.link} target="_blank" > See the work</a> </p>
              
            </div>

            <h5>My role:</h5>
            <div class="tags">
              {entry.data.tags.map((t) => <Pill>{t}</Pill>)}
            </div>
          </WorkTitle>
        </div>
      </header>
      <div id="Auth" style="display:none">
        <div class="passtext">
        This project hasn't been published yet. Please enter the code to access the content.
        </div>
        <div class="inputBox">
        <input
          id="password"
          class="password"
      
          placeholder="Enter password"
          type="text"
          autocomplete="off"
          autofocus
        />
        <button
          id="password-btn"
          class="bg-skin-full rounded-md
          border border-skin-fill border-opacity-50 p-2
          text-skin-base
          hover:border-skin-accent"
        >
          Submit
        </button>
        </div>
      </div>
      <main class="wrapper" id="hide">
        <div id="pass">
        <div class="stack gap-10 content">
          {
            entry.data.img && (
              <div>
              <img
              class="imgR"
                src={entry.data.img}
                style="  
                display: block;
                max-height:45rem;
                max-width:100%;
                margin:auto;
          "
                alt={entry.data.img_alt || ""}
              />
              </div>
            )
          }
         
          <div class="content">

            <Content />
          </div>
        </div>
        <div>
      </main>

    </div>

  </div>
  <script>
  
    import { md5 } from 'js-md5';
    var authList={"circularity":true,};
    console.log("hi");
    function prepare() {
    
        const input = document.getElementById("password");
        const passwordSection= document.getElementById("Auth");
        const btn = document.getElementById("password-btn");
        const wrap =document.getElementById("hide");
        const article =document.getElementById("pass");
        const href=window.location.href.split("/").pop();
    
       if(authList[href]){
          article.remove();
          passwordSection.style.display = "Flex";
        }
        else{
          passwordSection.remove();
        }
    
      input?.addEventListener("keydown", async (event) => {
      if (event.key === "Enter") {
        // Trigger the same functionality as the button click
        btn?.click(); // Simulate a button click
        // Add your async logic here
      }
    });
        btn?.addEventListener("click", async () => {
          const password= (document.getElementById("password") as HTMLInputElement | null)?.value;
          const hash=md5(password);
          try {
    
           if(hash=="fc9dd304468e3bedac00efbe78bbef85"){
            passwordSection.remove();
            wrap.append(article);
          }
          else{
            alert('wrong code');
          }
          } catch (e) {
            alert("Incorrect password");
          }
        });
      }
    
      prepare();
      document.addEventListener("astro:after-swap", prepare);
      </script>
</BaseLayout>

<style>
  header {
    padding-bottom: 2.5rem;
    border-bottom: 1px solid var(--gray-800);
  }

  .back-link {
    display: none;
  }
  a {
    font-size: var(  --text-md);
  position: relative;
  text-decoration: none;
}
#Auth {
  display: flex;
  flex-direction: column; /* Stack elements vertically */
  justify-content: center; /* Center vertically */
  align-items: center; /* Center horizontally */
  height: 50vh; /* Full height of the viewport */
  text-align: center; /* Center the text inside the container */
  background-color: transparent; 

}

.passtext {
  margin-bottom: 10px; /* Add some space between the text and input */
  font-size: 25px; /* Adjust the font size */
  color: var(--gray-0);
}

.inputBox {
  display: flex;
  flex-direction: column; /* Stack input and button vertically */
  align-items: center; /* Center them horizontally */
}

input.password {
  background-color: transparent;
  border: 2px solid #e25509; /* Semi-transparent border */
  border-radius: 25px;
  padding: 10px 20px;
  font-size: 16px;
  color: var(--gray-0);
  outline: none;
  margin-bottom: 15px; /* Space between input and button */
  text-align: center; /* Center the placeholder text */
}

button#password-btn {
  background-color: #333;
  color: #fff;
  padding: 10px 20px;
  border-radius: 25px;
  border: none;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

button#password-btn:hover {
  background-color: #555; /* Darker background on hover */
}


a:hover::after {
  content: "";
  position: absolute;
  left: 0%;
  right: 0%;
  bottom: 0;
  border: 1px solid;
}
  .details {
    display: flex;
    flex-direction: column;
    padding: 0.5rem;
    gap: 1.5rem;
    justify-content: space-between;
    align-items: center;

  
  }

  .tags {
    display: flex;
    gap: 0.5rem;
  }
.image_container{



    width: 100%;
    height: 40em;

    img {
        object-fit: cover;
        width: 100%;
        height: 100%;
    }


}
  .description {
    font-size: var(--text-lg);
    max-width: 60ch;
  }
  table {
    font-size: var(--text-md);
    border-collapse: collapse;
    font-size: :15px;
  }

  tr + tr > td {
  }
  .content {
    max-width: 105ch;
    margin-inline: auto;
  }

  .content > :global(* + *) {
    margin-top: 1rem;
  }

  .content :global(h1),
  .content :global(h2),
  .content :global(h3),
  .content :global(h4),
  .content :global(h5) {
    margin: 1.5rem 0;
  }

  .content :global(img) {

    box-shadow: var(--shadow-sm);
    background: var(--gradient-subtle);

  }
  .imgR{
    border-radius: 1.5rem;
    border: 1px solid var(--gray-800);

  }

  .content :global(blockquote) {
    font-size: var(--text-lg);
    font-family: var(--font-brand);
    font-weight: 600;
    line-height: 1.1;
    padding-inline-start: 1.5rem;
    border-inline-start: 0.25rem solid var(--accent-dark);
    color: var(--gray-0);
  }

  .back-link,
  .content :global(a) {
    text-decoration: 1px solid underline transparent;
    text-underline-offset: 0.25em;
    transition: text-decoration-color var(--theme-transition);
  }

  .back-link:hover,
  .back-link:focus,
  .content :global(a:hover),
  .content :global(a:focus) {
    text-decoration-color: currentColor;
  }

  @media (min-width: 50em) {
    .back-link {
      display: block;
      align-self: flex-start;
    }

    .details {
      flex-direction: row;
      gap: 2.5rem;

    }

    .content :global(blockquote) {
      font-size: var(--text-2xl);
    }
  }
</style>
